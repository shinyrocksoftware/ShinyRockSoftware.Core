//---------------------------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
// </auto-generated>
//---------------------------------------------------------------------------------------------------

using {{ClientNamespace}}.Stream.StreamJobs.Interfaces;
using Core.BackgroundService.Interface;
using Core.Configuration.ConnectorModels;
using Core.Configuration.Interface;
using Core.Extension;
using Core.Stream.Abstract.BackgroundServices;
using Core.Stream.ConnectorModels;
using Microsoft.Extensions.DependencyInjection;

namespace {{ClientNamespace}}.Background.BackgroundServices;

public class {{EntityName}}{{EntityLifeCycleEvent}}BackgroundService : BaseStreamBackgroundService, IPeriodicBackgroundService
{
	private readonly ServiceConnectorModel _serviceConnectorModel;

	public override string ServiceName => _serviceConnectorModel.ClientServiceNamePattern.ApplyFormat("{{ EntityLifeCycleEvent | string.downcase }}");
	public override TimeSpan Period { get; }

	public {{EntityName}}{{EntityLifeCycleEvent}}BackgroundService(IServiceScopeFactory serviceScopeFactory, I{{EntityName}}{{EntityLifeCycleEvent}}StreamJob streamJob)
		: base(serviceScopeFactory, streamJob)
	{
		using var asyncScope = ServiceScopeFactory.CreateScope();

		var connectorModelHelper = asyncScope.ServiceProvider.GetRequiredService<IConnectorModelHelper>();

		_serviceConnectorModel = connectorModelHelper.GetConnector<ServiceConnectorModel>();
		var kafkaConnectorModel = connectorModelHelper.GetConnector<KafkaConnectorModel>();

		Period = TimeSpan.FromSeconds(kafkaConnectorModel.ConsumerRebootTimeBySecond);
	}
}